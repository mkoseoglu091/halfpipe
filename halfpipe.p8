pico-8 cartridge // http://www.pico-8.com
version 34
__lua__
-- core game


-- init
function _init()
 title_init()
end


-- update
function _update()
 if (mode == 0) then
  title_update()
 elseif (mode == 1) then
  game_update()
 else
  gameover_update()
 end
end


-- draw
function _draw()
 if (mode == 0) then
  title_draw()
 elseif (mode == 1) then
  game_draw()
 else
  gameover_draw()
 end
end
-->8
-- skater

-- init skater
function init_skater()
 skater = {}
 skater.x = 60
 skater.y = 60
 skater.sp = 66
 skater.xflip = false
 skater.yflip = false
 -- trig
 skater.center_x = 56
 skater.center_y = 30
 skater.radius = 35
 skater.angle = -90 -- start degree
 skater.d_deg = 2 -- delta degree
 skater.dy = 1 -- delta y
 skater.dy_default = 1
 skater.parabola = true
 skater.par_limit = 30
 skater.y_limit = 0
 skater.going_up = true
 skater.right_max_angle = 0
 skater.left_max_angle = -180
 -- score
 skater.score = 0
 skater.change = false -- used to check inaction
 skater.combo = 0
 skater.multiplier = 1
 skater.base_score = 10
 skater.combo_limit = 10
 skater.trick_timer = 56
 skater.difficulty = 1 -- can be up to 3
 skater.victory_word = "awesome!!"
end



-- draw skater
function draw_skater()
 if (skater.x < 20) then
  skater.sp = 72
  skater.xflip = false
 elseif (skater.x < 25) and (skater.x > 20) then
  skater.sp = 70
  skater.xflip = false
 elseif (skater.x < 30) and (skater.x > 25) then
  skater.xp = 68
  skater.xflip = false
 elseif (skater.x < 90) and (skater.x > 30) then
  skater.sp = 66
  skater.xflip = true
 elseif (skater.x < 95) and (skater.x > 90) then
  skater.sp = 68
  skater.xflip = true
 elseif (skater.x < 100) and (skater.x > 95) then
  skater.sp = 70
  skater.xflip = true
 elseif (skater.x > 100) then
  skater.sp = 72
  skater.xflip = true
 end 
 spr(skater.sp, skater.x, skater.y, 2, 2, skater.xflip, skater.yflip)
end



-- display score
function display_score()
 print("score:"..skater.score, 2, 106, 0)
 if skater.score > dget(1) then
  print("high score:"..pad(tostr(skater.score), 5), 60, 106)
 else
  print("high score:"..pad(tostr(dget(1)), 5), 60, 106)
 end 
end


-- game over
function fail()
 gameover_init()
end


-- trig - harmonic movement

-- angle conversion func
function from_angle(n)
 return n / 360
end

-- harmonic movement
function harmonic()
	if (skater.y <= skater.par_limit) and (skater.parabola) then
	 skater.parabola = false
	elseif (skater.y > skater.par_limit) and (not skater.parabola) then
	 skater.parabola = true
	end
	
 -- if parabola
 if (skater.parabola) then
  -- calculate x y
  skater.dy = skater.dy_default
  skater.going_up = true
  -- set dy to default value first
  local a = from_angle(skater.angle)
  skater.x = skater.center_x + (skater.radius * cos(a)*1.1) * 1.2
  skater.y = skater.center_y + (skater.radius * sin(a))
 
  -- change direction
  if (skater.angle >= skater.right_max_angle) or (skater.angle <= skater.left_max_angle) then
   skater.d_deg = (-1) * skater.d_deg
  end
  
  -- change angle
  skater.angle += skater.d_deg
 end
 
 -- if not parabola
 if (not skater.parabola) then
  -- change direction
  if (skater.y <= skater.y_limit) and (skater.going_up) then
   skater.dy = (-1) * skater.dy
   skater.going_up = false
  end
  
  -- change y
  skater.y -= skater.dy
 end
  
end
-->8
-- tricks

-- array of buttons
function init_tricks()
 arrows = {"⬆️", "⬇️", "➡️", "⬅️"}
 buttons = {"❎", "🅾️"}
 direction = ""
 button = ""
 expecting_trick = false
 valid_input = nil
 check_score = true
 y_limit_counter = 0
 button_dict={}
 button_dict["⬆️"] = 134
 button_dict["⬇️"] = 132
 button_dict["➡️"] = 130
 button_dict["⬅️"] = 128
 button_dict["🅾️"] = 136
 button_dict["❎"] = 138
end




-- choose random combination
function pick_trick()
 valid_input = nil
 direction = rnd(arrows)
 button = rnd(buttons)
end

-- draw trick text
function draw_trick()
 if (expecting_trick) then
  spr(button_dict[direction], 38, 90, 2, 2)
  spr(140, 59, 90, 2, 2)
  spr(button_dict[button], 75, 90, 2, 2)
  --print(""..direction .." + " ..button, 48, 30, 7)
  trick_outcome()
 end
end

-- update trick
function update_trick()
 if (skater.y < skater.par_limit) and (not expecting_trick) then
  expecting_trick = true
  pick_trick()
  check_score = true
  y_limit_counter += 1
 elseif (skater.y > skater.par_limit) and (expecting_trick) then
  expecting_trick = false
  y_limit_counter += 1
 end
end

-- convert button
function convert_button(a)
 if (a == "⬅️") then
  return 0
 elseif (a == "➡️") then
  return 1
 elseif (a == "⬆️") then
  return 2
 elseif (a == "⬇️") then
  return 3
 elseif (a == "🅾️") then
  return 4
 elseif (a == "❎") then
  return 5
 end
end


-- check input
function check_input()
 if (expecting_trick) then
  -- find the required combo and incorrect buttons
  all_dir = {0, 1, 2, 3}
  all_btn = {4, 5}
  req_dir = convert_button(direction)
  req_btn = convert_button(button)
  del(all_dir, req_dir)
  del(all_btn, req_btn)

  -- check if correct combo is entered
  if check_score then
   if y_limit_counter % 2 == 0 and skater.oldscore == skater.score then
    fail()
   end
   if btn(req_dir) then
    if btn(req_btn) then
    -- success!!
     check_score = false
     valid_input = true
     skater.combo += 1
     
     --if (skater.combo % 2 == 0) then
     -- if sgn(skater.dy) == 1 then
     --  skater.dy += 1
     --  skater.dy_default += 1
     -- else
     --  skater.dy -= 1
     --  skater.dy_default -= 1
     -- end
     --end
     skater.change = true
     skater.score += skater.multiplier * skater.base_score
     
     -- increase multiplier
     if (skater.combo % skater.combo_limit == 0) then
      skater.multiplier += 1
     end
     
     -- effects
     for i=0, 10 do
      add_new_dust(64,70,rnd(4)-2,rnd(4)-2,50,rnd(2)+1,0.05,{7,7,7,7,7,7,6,6,6,6,6,5,5,9,9,10,10,10,10,10,8,8,8,8})
     end

     
    elseif btn(all_btn[1]) then
     check_score = false
     valid_input = false
    end
    
   elseif btn(all_dir[1]) or btn(all_dir[2]) or btn(all_dir[3]) then
    check_score = false
    valid_input = false
   end

  end
  
 end 
end


-- check inaction
function inaction()
 if (y_limit_counter %2 == 1) and (y_limit_counter > 0) then
  timer += 1
 end
 if (y_limit_counter %2 == 0) and (y_limit_counter > 0) then
  timer = 0
  skater.change = false
 end
 if (timer > skater.trick_timer) and (skater.change == false) then
  fail()
 end
end


-- display trick outcome
function trick_outcome()
 if (valid_input == true) then
  print(skater.victory_word, 50, 50)
 elseif (valid_input == false) then
  fail()
 end
end
-->8
-- states


-- title state

-- title init
function title_init()
 mode = 0
 init_scoreboard()

end

-- title update
function title_update()
 if btn(5) then
  game_init()
 end
end

-- title draw
function title_draw()
 cls()
 map(19)
 print("by mehmet koseoglu", 20, 60, 7)
 print("press ❎ to start", 20, 70,7)
 draw_scores(7)
end




-- game state

-- game init
function game_init()
 music(0)
 mode = 1
 init_skater()
 init_tricks()
 init_dust()
 init_scoreboard()
 timer = 0
end

-- game update
function game_update()
 -- core gameplay
 harmonic()
 update_trick()
 check_input()
 inaction()
 update_dust()
 increase_difficulty()
end

-- game draw
function game_draw()
 -- core draw
 cls()
 map(0)
 draw_skater()
 draw_trick()
 display_score()
 draw_dust()
end



-- gameover state

-- gameover init
function gameover_init()
 music(2)
 mode = 2
 wait = 1
 time_i = 0
 sfx(0)
end

-- gameover update
function gameover_update()
 -- wait 2 seconds before starting new game
 time_i += 1
 if skater.score > dget(3) and not score_entered and (time_i > wait*15) then
  input_score = true
  enter_name(player_name, name_index)
 else
  
  if btn(5) and (time_i > wait*30)then
   game_init()
  end
 end
 
end

-- gameover draw
function gameover_draw()
 -- gameover screen
 cls()
 map(37)
 print("game over", 20, 25, 0)
 print("score: "..skater.score, 20, 40, 0)
 if score_entered then
  print("to play again press ❎", 20, 55, 0)
 end
 draw_scores(0)
end
-->8
-- particle effects

-- init dust
function init_dust()
 dust = {}
end

-- update dust
function update_dust()
 for d in all(dust) do
  d:update()
 end
end

-- draw dust
function draw_dust()
 for d in all(dust) do
  d:draw()
 end
end

-- particle effects
function add_new_dust(_x,_y,_dx,_dy,_l,_s,_g,_f)
	add(dust, {
		fade=_f,
 	x=_x,
 	y=_y,
 	dx=_dx,
 	dy=_dy,
 	life=_l,
 	orig_life=_l,
 	rad=_s,
		col=0, --set to color
 	grav=_g,
 	draw=function(self)
 		--this function takes care
 		--of drawing the particle
 		
 		--clear the palette
 		pal()
 		palt()
 		
 		--draw the particle
 		circfill(self.x,self.y,self.rad,self.col)
 	end,
 	update=function(self)
 		--this is the update function
 		
 		--move the particle based on
 		--the speed
 		self.x+=self.dx
 		self.y+=self.dy
 		--and gravity
 		self.dy+=self.grav
 		
 		--reduce the radius
 		--this is set to 90%, but
 		--could be altered
 		self.rad*=0.9
 		
 		--reduce the life
 		self.life-=1
 		
 		--set the color
 		if type(self.fade)=="table" then
 			--assign color from fade
 			--this code works out how
 			--far through the lifespan
 			--the particle is and then
 			--selects the color from the
 			--table
		 	self.col=self.fade[flr(#self.fade*(self.life/self.orig_life))+1]
			else
				--just use a fixed color
				self.col=self.fade		 	
		 end
		 
		 --if the dust has exceeded
		 --its lifespan, delete it
		 --from the table
	 	if self.life<0 then
 			del(dust,self)
 		end
 	end
 })
end
-->8
-- increase difficulty

function increase_difficulty()
 if (skater.difficulty == 1) and (skater.combo == 4) and (skater.y > 60) then
  skater.dy = 2
  skater.dy_default = 2
  skater.d_deg = 3
  skater.trick_timer = 30
  skater.victory_word = "amazing!!!"
  skater.difficulty = 2
 end
 
 if (skater.difficulty == 2) and (skater.combo == 10) and (skater.y > 60) then
  skater.dy = 3
  skater.dy_default = 3
  skater.d_deg = 4
  skater.trick_timer = 20
  skater.victory_word = "incredible!!!"
  skater.difficulty = 3
 end
 
 if (skater.difficulty == 3) and (skater.combo == 20) and (skater.y > 60) then
  skater.dy = 4
  skater.dy_default = 4
  skater.d_deg = 5
  skater.trick_timer = 15
  skater.victory_word = "no way!!!"
  skater.difficulty = 4
 end
end
-->8
-- scoreboard
function init_scoreboard()
 characters = { "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", " " }
 input_score = false
 score_entered = false
 player_name = {1, 1, 1, 1, 1, 1}
 name_index = 1
 select_col = 1
end


cartdata("mehmet_halfpipe_1")
--32767 -- max val
-- set start scores
--[[
dset(1, 30)
dset(2, 20)
dset(3, 10)

dset(11, 1)
dset(12, 1)
dset(13, 1)
dset(14, 1)
dset(15, 1)
dset(16, 1)

dset(21, 1)
dset(22, 1)
dset(23, 1)
dset(24, 1)
dset(25, 1)
dset(26, 1)

dset(31, 1)
dset(32, 1)
dset(33, 1)
dset(34, 1)
dset(35, 1)
dset(36, 1)
]]--

-- 1 = top score 
-- 2 = 2nd score
-- 3 = 3rd score
-- 11,12,13,14,15,16 = 1st player
-- 21,22,23,24,25,26 = 2nd player
-- 31,32,33,34,35,36 = 3rd player


-- convert char to int
function char_to_int(char)
	for k,v in pairs(characters) do
		if (v == char) return k
	end
	return -1
end


-- convert int to char
function int_to_char(int)
	for k,v in pairs(characters) do
		if (k == int) return v
	end
	return ""
end


-- zero padding
function pad(string,length)
 if (#string==length) return string
 return "0"..pad(string, length-1)
end



-- print scoreboard in col color
function draw_scores(col)
 one_name, one_score = get_name_score(1)
 two_name, two_score = get_name_score(2)
 thr_name, thr_score = get_name_score(3)
 if input_score then
  print("press ❎ after entering your name", 20, 55, 0)

  select_col+= 1
  local p_name = int_to_char(player_name[1])..int_to_char(player_name[2])..int_to_char(player_name[3])..int_to_char(player_name[4])..int_to_char(player_name[5])..int_to_char(player_name[6])
  if select_col > 15 then select_col = 0 end
  if skater.score > dget(1) then
   print("1."..p_name.." ........... "..pad(tostr(skater.score), 5), 12, 90, select_col)
   print("2."..one_name.." ........... "..pad(one_score, 5), 12, 97, col)
   print("3."..two_name.." ........... "..pad(two_score, 5), 12, 104, col)
  
  elseif skater.score > dget(2) then
   print("1."..one_name.." ........... "..pad(one_score, 5), 12, 90, col)
   print("2."..p_name.." ........... "..pad(tostr(skater.score), 5), 12, 97, select_col)
   print("3."..two_name.." ........... "..pad(two_score, 5), 12, 104, col)
  
  else
   print("1."..one_name.." ........... "..pad(one_score, 5), 12, 90, col)
   print("2."..two_name.." ........... "..pad(two_score, 5), 12, 97, col)
   print("3."..p_name.." ........... "..pad(tostr(skater.score), 5), 12, 104, select_col)
  end
 else -- only viewing score
  print("1."..one_name.." ........... "..pad(one_score, 5), 12, 90, col)
  print("2."..two_name.." ........... "..pad(two_score, 5), 12, 97, col)
  print("3."..thr_name.." ........... "..pad(thr_score, 5), 12, 104, col)
 end
end


-- get name and score from position
function get_name_score(pos)
 if pos > 3 or pos < 1 then return nil, nil end
 name = int_to_char(dget(pos*10+1))..int_to_char(dget(pos*10+2))..int_to_char(dget(pos*10+3))..int_to_char(dget(pos*10+4))..int_to_char(dget(pos*10+5))..int_to_char(dget(pos*10+6))
 score = tostr(dget(pos))
 return name, score
end


-- shift down entered position (only for 1st and 2nd)
function shift_down(pos)
 if pos == 1 or pos == 2 then
  dset(pos+1, dget(pos))
  for i=1,6 do
   dset((pos+1)*10+i,dget(pos*10+i) )
  end
 end
end


-- enter name
function enter_name(name_array)
 if btnp(1) then
  name_index+=1
  if name_index == 7 then name_index = 1 end
 end
 if btnp(0) then
  name_index-=1
  if name_index == 0 then name_index = 6 end 
 end
 if btnp(2) then
  name_array[name_index]+=1
  if name_array[name_index] == 38 then name_array[name_index] = 1 end
 end
 if btnp(3) then
  name_array[name_index]-=1
  if name_array[name_index] == 0 then name_array[name_index] = 37 end
 end
 if btn(5) then 
  set_new_score(skater.score, player_name) 
 end
end



-- set new score
function set_new_score(score, name_array)
 if score > 32767 then score = 32767 end
 if score > dget(1) then -- new high score
  shift_down(2)
  shift_down(1)
  -- set name
  for i=1, 6 do
   dset(10+i, name_array[i])
  end
  -- set score
  dset(1, score)
 elseif score > dget(2) then -- new 2nd high score
  shift_down(2)
  -- set name
  for i=1, 6 do
   dset(20+i, name_array[i])
  end
  -- set score
  dset(2, score)
 elseif score > dget(3) then -- new 3rd high score
  -- set name
  for i=1, 6 do
   dset(30+i, name_array[i])
  end
  -- set score
  dset(3, score)
 end
 input_score = false
 score_entered = true
 time_i = 0
end

--[[
function _update()
 if player_score > dget(3) and not score_entered then
  input_score = true
  enter_name(player_name, name_index)
 end
end


function _draw()
 cls()
 draw_scores(7)
end
]]--

__gfx__
0000000099999999aaaaaaaa00cccccccccccccccccccccccccccc0044444444099999994444444499999999444444449999999044444444cccccccc44444444
0000000099999999aaaaaaaa9900cccccccccccccccccccccccc009944444444099999994444444499999999444444449999999044444444cccccccc44444444
0070070099999999aaaaaaaa999900cccccccccccccccccccc00999944444444099999994444444499999999444444449999999044444444cccccccc44444444
0007700099999999aaaaaaaa99999900cccccccccccccccc0099999944444444099999994444444499999999444444449999999044444444cccccccc44444444
0007700099999999aaaaaaaa9999999900cccccccccccc009999999944444444409999994444444499999999444444449999990444444444cccccccc44444444
0070070099999999aaaaaaaa999999999900cccccccc00999999999944444444409999994444444499999999444404889999990444bb4044cccccccc4404ee44
0000000099999999aaaaaaaa99999999999900cccc009999999999994444444440999999404404cc99999999444044009999990404004044cccccccc44040044
0000000099999999aaaaaaaa9999999999999900009999999999999944444444409999994044040000000000444044009999990404004044cccccccc44040044
00000000ccccccccdddddddd44444400cccccaaaaaaccccc99999999000000004409999999999990099999990044444499999044ccccccc00ccccccccccccccc
00000000ccccccccdddddddd44444444cccaaaaaaaaaaccc99999999044444404409999999999990099999994444444499999044ccccccc00ccccccccccccccc
00000000ccccccccdddddddd44444444ccaaaaaaaaaaaacc99999999044444404409999999999990099999994444444499999044ccccccc00ccccccccccccccc
00000000ccccccccdddddddd44444444caaaaaaaaaaaaaac99999999044444404440999999999990099999994444444499990444ccccccc00ccccccccccccccc
00000000ccccccccdddddddd44444444caaaaaaaaaaaaaac00000000044444404440999999999990099999994444444499990444cccccc0990cccccccccccccc
00000000ccccccccdddddddd44444444aaaaaaaaaaaaaaaa44444444044444404440999999999990099999994444444499990444cccccc0990cccccccccccccc
00000000ccccccccdddddddd44444444aaaaaaaaaaaaaaaa44444444044444404444099999999990099999994444444499904444cccccc0990cccccc00000000
00000000ccccccccdddddddd44444444aaaaaaaaaaaaaaaa44444444044444404444099999999990099999994444444499904444ccccc099990ccccc99999999
000000008cc88cc8cccccccccccccccc7777aaaaaaaaaaaacccccccc044444404444099999999999999999999999999999904444ccccc099990ccccccccccccc
00000000cc88cc88cccccccccc77777777777777aaaaaaaacccccccc044444404444409999999999009999999999999999044444ccccc099990ccccccccccccc
00000000c88cc88cccccccc77777777777777777777aaaaa7ccccccc044444404444409999999999440099999999999999044444cccc09999990cccccccccccc
0000000088cc88ccccc77777777777777777777777777aac77777ccc044444404444440999999999444400009999999990444444cccc09999990cccccccccccc
000000008cc88cc8cccccc77777777777777777777777aac777ccccc044444404444440999999999444444449999999990444444cccc09999990cccccccccccc
00000000cc88cc88cccccccc7777777777777777777aaacccccccccc044444404444444099999999444444449999999904444444ccc0999999990ccc0000cccc
00000000c88cc88cccccccccc777ccccccc77777aaaaaccccccccccc044444404444444409999999444444449999999044444444ccc0999999990ccc99990000
0000000088cc88cccccccccccccccccccccccaaaaaaccccccccccccc044444404444444440999999444444449999990444444444cc099999999990cc99999999
0000000099999999999999999999904444099999999999999999999944444440044444440000000044444444cccccccccccccccccc099999999990cccccccccc
0000000099999900999999999999044444409999999999999999999944444440044444444444444444444444ccccccccccccccccc09999999999990ccccccccc
0000000099990044999999999990444444440999999999999999999944444440044444444444444444444444ccccccccccccccc009999999999999900ccccccc
0000000000004444999999999904444444444099999999999999999944444440044444444444444444444444ccccccccccccc0099999999999999999900ccccc
0000000044444444999999990044444444444400999999999999999944444440044444444444444444444444cccccccccc0009999999999999999999999000cc
0000000044444444999999004444444444444444009999999999999944444440044444444444444444444444cccc000000999999999999999999999999999900
00000000444444449999004444444444444444444400999999999999444444400444444444444444444444440000999999999999999999999999999999999999
00000000444444449900444444444444444444444444009999999999444444400444444444444444444444449999999999999999999999999999999999999999
00bbbb0000bb00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0bbbbbb000ff00000000bbb0000000000000000bbb00000000000000000000000000000000000000000000000000000000000000000000000000000000000000
bbbbbbbb00ff00000000fff0000000000000000fff00000000000000000000000000000000ff0000000000000000ff00000000000000ff00000000000000ff00
bbbbbbbbfb55bf0000007f700000000000000007f7000000000000ffb00000000b0000000b0000000b000000000b00000b000000000b00000b000000000b0000
bbbbbbbb005500000000fff000000000000f000fff000000000000000f000000eb000000f0000000eb00000000f00000bbb0000000f000000be0000000f00000
bbbbbbbb0050500000000f00000000000000b000f00000000b000000550f7fb00bfbf55550f7fb000b00fbf55550f7fbbbb0fbf55550f7fb0b00fbf55550f7fb
0bbbbbb000f0f000000f555f0000000000000ff555f000000bffbf5555ffffb00b0000555ffffb000b000000555ffffbbbb00000555ffffb0b000000555ffffb
00bbbb0000bbbb0000b05550b000000000000005550b00000eb00005550f7fb00bfbf55550f7fb000b00fbf55550f7fbbbb0fbf55550f7fb0b00fbf55550f7fb
000000000000000000f055500f00000000000005550f000000b00ff55f000000eb000000f0000000eb00000000f00000bbb0000000f000000be0000000f00000
000000000000000000f055500000000000000055500f0000000bfb000f0000000b000000f00000000b00000000f000000b00000000f000000b00000000f00000
00000000000000000000505000000000000000f050000000000b0000b0000000000000ffb000000000000000ffb0000000000000ffb0000000000000ffb00000
00000000000000000000f0f00000000000000bf0f0000000000eb00f000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000b0b00000000000bb0f00b00000000000b000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000f0f000000000000ebb00f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000bbbbbbb0000000000000bbf000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000e000e000000000000000ebb00000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000ff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0b000000000b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
ebe0000000f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
bbb0fbf55550f7fb0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
bbb00000555ffffb0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
bbb0fbf55550f7fb0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
ebe0000000f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0b00000000f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000ffb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00666666666660000066666666666000006666666666600000666666666660000066666666666000006666666666600000066600000000000000000000000000
06666666116666000666611666666600066666666666660006666666666666000666666666666600066666666666660000066600000000000000000000000000
66666661116666606666611166666660666611111116666066666661666666606666111111166660666611666116666000066600000000000000000000000000
66666611116666606666611116666660666611111116666066666611166666606666116661166660666661161166666066666666600000000000000000000000
66666111116666606666611111666660666661111166666066666111116666606666116661166660666666111666666066666666600000000000000000000000
66666611116666606666611116666660666666111666666066661111111666606666116661166660666661161166666066666666600000000000000000000000
66666661116666606666611166666660666666616666666066661111111666606666111111166660666611666116666000066600000000000000000000000000
06666666116666000666611666666600066666666666660006666666666666000666666666666600066666666666660000066600000000000000000000000000
00666666666660000066666666666000006666666666600000666666666660000066666666666000006666666666600000066600000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11111111111111111111111111111111000000000000000001111111111111111111111111111111111111111111110000000000000000000000000000000000
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000
1eeeeeeeeee111eeeeeeeeee111eeee11111111eeeeeeeee111eeeeeeeee111eeeee111eeeeeeeee111eeeeeeeee111110000000000000000000000000000000
1eeeeeeeeeee11eeeeeeeeeee11eeeee1111111eeeeeeeeee11eeeeeeeeee11eeeeee11eeeeeeeeee11eeeeeeeeee11110000000000000000000000000000000
1ee222ee222e11ee22222222e11ee22e1111111ee2222222e11ee2222222e11ee222e11ee2222222e11ee2222222e11110000000000000000000000000000000
1ee222ee222e11ee22222222e11ee22e1111111ee2222222e11ee2222222e11ee222e11ee2222222e11ee2222222e11111000000000000000000000000000000
1ee222ee222e11ee22222222e11ee22e1111111ee222eeeee11ee222ee22e11ee222e11ee222ee22e11ee222eeeee11111000000000000000000000000000000
1ee22222222e11ee222ee222e11ee22e1111111ee2222222e11ee222ee22e11ee222e11ee222ee22e11ee2222222e11111000000000000000000000000000000
1ee22222222e11ee222ee222e11ee22e1111111ee2222222e11ee222ee22e11ee222e11ee222ee22e11ee2222222e11111100000000000000000000000000000
1ee222ee222e11ee22222222e11ee22e1111111ee222eeeee11ee2222222e11ee222e11ee2222222e11ee222eeeee11111111111110000000000000000000000
1ee222ee222e11ee22222222e11ee22eeeee111ee222e111111ee2222222e11ee222e11ee2222222e11ee222eeeee11111111111110000000000000000000000
1ee222ee222e11ee222ee222e11ee22eeeeee11ee222e111111ee222eeeee11ee222e11ee222eeeee11ee222eeeee11111111111110000000000000000000000
1ee222ee222e11ee222ee222e11ee2222222e11ee222e111111ee222e111111ee222e11ee222e111111ee222eeeee11111111111110000000000000000000000
1ee222ee222e11ee222ee222e11ee2222222e11ee222e111111ee222e111111ee222e11ee222e111111ee2222222e11111111111110000000000000000000000
1ee222ee222e11ee222ee222e11ee2222222e11ee222e111111ee222e111111ee222e11ee222e111111ee2222222e11111111111111100000000000000000000
11eeeeeeeeee111eeeeeeeeee111eeeeeeeee111eeeee1111111eeeee1111111eeeee111eeeee1111111eeeeeeeee11111111111111111110000000000000000
11111111111111111111111111111111111111111111111111111111111111111110011111111111111111111111110011111111111111110000000000000000
11111111111111111111111111111111111111111111111111111111111111100007700000000000000000000000007700001111111111110000000000000000
11111111111111111111111111111111111111111111111111111111111110077707707777777777777777777777707707770011111111110000000000000000
111111111111111111111111111111111111111111111111111111111111077ffff00fffffffffffffffffffffffff00ffff7701111111110000000000000000
1111111111111111111111111111111111111111111111111111111111107ffffff060ffffffff2fffff2ffffffff060ffffff70111111110000000000000000
1111111111111111111111111111111111111111111111111111111111107ffffff060fffffffff2fff2fffffffff060ffffff70111111110000000000000000
11111111111111111111111111111111111111111111111111111111110fffffff006000ffffff2222222ffffff000600ffffff7011111110000000000000000
11111111111111111111111111111111111111111111111111111111110fffffff006060fffff22f222f22fffff060600ffffff7011111110000000000000000
11111111011001101111111111111111111111111111111111111111110fffffff006000ffff22222222222ffff000600ffffff7011111110000000000000000
111111111100110011111111111111111111111111111111111111111110fffffff060ffffff2f2222222f2ffffff060fffffff0111111110000000000000000
111111111001100111111111111111111111111111111111111111111110fffffff060ffffff2f2fffff2f2ffffff060fffffff0111111110000000000000000
1111111100110011111111111111111111111111111111111111111111110ffffff00ffffffffff22f22ffffffffff00ffffff01111111110000000000000000
111111110110011011111111111111111111111111111111111111111111100fff0770fffffffffffffffffffffff0770fff0011111111110000000000000000
11111111110011001111111111111111111111111111111111111111111111100007700000000000000000000000007700001111111111110000000000000000
11111111100110011111111111111111111111111111111111111111111111111110011111111111111111111111110011111111111111110000000000000000
11111111001100111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000
__map__
11111111111111111111111111141511000000f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1000021212121212121212121212121212121000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11111111111111111111112223242511000000e4e4e4e4e4e4e4e4e4e4e4e4e4e4e4e4000011111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
23232611111111111111111111112223000000e4e4c0c1c2c3c4c5c6c7c8c9cacbe4e4000011111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11222326111111111111112223261111000000e4e4d0d1d2d3d4d5d6d7d8d9dadbe4e4000011111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
17030411111111111111111111050617000000e4e4e4e4e4e4e4e4e4e4e4e4e4e4e4e4000011111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2701190e11111111111111110e1a0127000000e4e4e4e4e6e6e6e6e6e7e8e9eaebeced000011111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3808011e111111111111110e1d010c37000000e4e4e4e4e6e6e6e6e6f7f8f9fafbfcfd000011111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3818012e111111110e0e0e0e2d011c37000000e4e4e4e4e4e4e4e4e4e4e4e4e4e4e4e4000011111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3828293e3f2f1f1f1f1f3b3c3d2b2c37000000e4e4e4e4e4e4e4e4e4e4e4e4e4e4e4e4000011111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
38073435360101010101010132330737000000e4e4e4e4e4e4e4e4e4e4e4e4e4e4e4e4000011111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
380707132a161616161616311b070737000000f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1000021212121212121212121212121212121000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
38070707070707070707070707070737000000f1e4e4f3f3f3f3f3f3f3f3f3f3f3f3f1000021111111111111111111111111111121000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
38070707070707070707070707070737000000f1e4e4f3f3f3f3f3f3f3f3f3f3f3f3f1000021111111111111111111111111111121000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
38070707070707070707070707070737000000f1e4e4f3f3f3f3f3f3f3f3f3f3f3f3f1000021111111111111111111111111111121000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1000021212121212121212121212121212121000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
00060000211501f1501d1501b15018150161501415012150101500e1500c1500a1500815006150041500215000150001500000001000000000400003000030000200002000010000100001000000000000000000
011200001631016310163100030016310163101631000300163101631016310003001631016310163100030015310153101531000300153101531015310003001631016310163100030016310163101631000300
011200000f3100f3100f310003000f3100f3100f310003000f3100f3100f310003000f3100f3100f310003000b3100b3100b310003000b3100b3100b310003000a3100a3100a310003000a3100a3100a31000300
011200001b3101b3101b310003001b3101b3101b310003001b3101b3101b310003001b3101b3101b310003001b3101b3101b310003001b3101b3101b310003001931019310193100030019310193101931000300
011200001e3101e3101e310003001e3101e3101e310003001e3101e3101e310003001e3101e3101e310003001e3101e3101e310003001e3101e3101e310003001831018310183100030018310183101831000300
011202010f3701237016370003000f3700f3700f370003000f37012370163701737016370123700f3700d3700b3700b3701237000300193701937017370153001637014370123700030016370163701237000300
__music__
02 01020305
00 45424344

